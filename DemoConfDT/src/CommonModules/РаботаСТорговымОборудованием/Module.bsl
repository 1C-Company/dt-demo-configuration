//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ 
//
// Модуль содержит процедуры и функции, предназначенные для работы с торговым оборудованием

// Начинает подключение к сканеру штрихкодов
//
// Параметры: 
//  ОписаниеЗавершение - описание оповещения, которое будет вызвано при завершении операции
//
// Возвращаемое значение:
//  Нет
Процедура НачатьПодключениеСканераШтрихкодов(ОписаниеЗавершение=Неопределено) Экспорт
	
	// Параметры, которые передаются через стек асинхронных вызовов
	ДопПараметры = Новый Структура("ОписаниеЗавершение", ОписаниеЗавершение);
	ОпПослеПодключенияКомпоненты = Новый ОписаниеОповещения(
			"ПослеПодключенияКомпонентыСканера", ЭтотОбъект, ДопПараметры);

	// Подключение внешней компоненты сканера
	Если ДрайверСканераШтрихкодов = Неопределено Тогда
		НачатьПодключениеВнешнейКомпоненты(ОпПослеПодключенияКомпоненты, "ОбщийМакет.ДрайверСканераШтрихкодов", "Сканер");
	Иначе
		ВыполнитьОбработкуОповещения(ОпПослеПодключенияКомпоненты, Истина);      
	КонецЕсли
	
КонецПроцедуры

// Начинает установку свойств после подключения внешней компоненты сканера
Процедура ПослеПодключенияКомпонентыСканера(РезультатПодключения, ДопПараметры) Экспорт
	Если РезультатПодключения = Ложь Тогда 
		Возврат;
	КонецЕсли;
	ТипОС = ПолучитьТипОС();
	
	ПараметрыСканера = РаботаСХранилищемОбщихНастроек.ЗагрузитьПараметрыПодключенияСканера(ТипОС);
	Если ПараметрыСканера = Неопределено Тогда
		ВыполнитьОбработкуОповещенияЕслиОпределено(ДопПараметры.ОписаниеЗавершение, Ложь);
	КонецЕсли;
	
	ДрайверСканераШтрихкодов = Новый ("AddIn.Сканер.BarcodeReader");

	// Добавляем в дополнительные параметры настройки сканера
	ДопПараметры.Вставить("ПараметрыСканера", ПараметрыСканера);
	
	// Устанавливаем свойство БитДанных
	ОпПослеУстановкиБитаДанных = Новый ОписаниеОповещения("ПослеУстановкиБитаДанных", ЭтотОбъект, ДопПараметры);
	ДрайверСканераШтрихкодов.НачатьУстановкуБитДанных(ОпПослеУстановкиБитаДанных, ПараметрыСканера.БитДанных);
	
КонецПроцедуры

// Начинает установку свойства Порт
Процедура ПослеУстановкиБитаДанных(ДопПараметры) Экспорт
	
	// Устанавливаем свойство Порт
	ОпПослеУстановкиПорта = Новый ОписаниеОповещения("ПослеУстановкиПорта", ЭтотОбъект, ДопПараметры);
	ДрайверСканераШтрихкодов.НачатьУстановкуПорт(ОпПослеУстановкиПорта, ДопПараметры.ПараметрыСканера.Порт);
	
КонецПроцедуры

// Начинает установку свойства Скорость
Процедура ПослеУстановкиПорта(ДопПараметры) Экспорт
	
	// Устанавливаем свойство Скорость
	ОпПослеУстановкиСкорости = Новый ОписаниеОповещения("ПослеУстановкиСкорости", ЭтотОбъект, ДопПараметры);
	ДрайверСканераШтрихкодов.НачатьУстановкуСкорость(ОпПослеУстановкиСкорости, ДопПараметры.ПараметрыСканера.Скорость);
	
КонецПроцедуры
	
// Начинает установку свойства ИмяСобытия
Процедура ПослеУстановкиСкорости(ДопПараметры) Экспорт
	
	// Устанавливаем свойство ИмяСобытия
	ОпПослеУстановкиИмениСобытия = Новый ОписаниеОповещения("ПослеУстановкиИмениСобытия", ЭтотОбъект, ДопПараметры);
	ДрайверСканераШтрихкодов.НачатьУстановкуИмяСобытия(ОпПослеУстановкиИмениСобытия, "СканерШтрихкода");
	
КонецПроцедуры

// Пытается занять устройство после установки всех свойств
Процедура ПослеУстановкиИмениСобытия(ДопПараметры) Экспорт
	
	// Проверяем занятость устрйоства
	ОпПослеПроверкиЗанятости = Новый ОписаниеОповещения("ПослеПроверкиЗанятости", ЭтотОбъект, ДопПараметры);
	ДрайверСканераШтрихкодов.НачатьПолучениеУстройствоЗанято(ОпПослеПроверкиЗанятости);
	
КонецПроцедуры

// Установка занятости устройства если оно свободно
Процедура ПослеПроверкиЗанятости(УстройствоЗанято, ДопПараметры) Экспорт
	
	Если УстройствоЗанято = Истина Тогда
		ВыполнитьОбработкуОповещенияЕслиОпределено(ДопПараметры.ОписаниеЗавершение, Истина);
	Иначе
		ОпПослеЗанятияУстройства = Новый ОписаниеОповещения("ПослеЗанятияУстройства", ЭтотОбъект, ДопПараметры,
			"ПослеЗанятияУстройстваОшибка", ЭтотОбъект);
		ДрайверСканераШтрихкодов.НачатьВызовЗанять(ОпПослеЗанятияУстройства);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПослеЗанятияУстройства(РезультатВызова, ПараметрыВызова, ДопПараметры) Экспорт
	
	// Все операции по подключению выполнеы успешно
	ВыполнитьОбработкуОповещенияЕслиОпределено(ДопПараметры.ОписаниеЗавершение, Истина);
	
КонецПроцедуры

Процедура ПослеЗанятияУстройстваОшибка(Ошибка, СтандартнаяОбработка, ДопПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПоказатьПредупреждение( ,НСтр("ru = 'Ошибка при попытке занять устройство'", "ru"));
	ВыполнитьОбработкуОповещенияЕслиОпределено(ДопПараметры.ОписаниеЗавершение, Ложь);
	
КонецПроцедуры


// Отключение от сканера штрихкодов
// 
// Параметры: 
//  ОповещениеЗавершение - описание оповещения, которое будет вызвано при завершении операции
// 
// Возвращаемое значение: 
//  Нет
Процедура НачатьОтключениеСканераШтрихкодов(ОповещениеЗавершение) Экспорт

	Если ДрайверСканераШтрихкодов <> Неопределено Тогда

		ОпПослеОтсоединенияСканера = Новый ОписаниеОповещения("ПослеОтсоединенияСканера", ЭтотОбъект, ОповещениеЗавершение);
		ДрайверСканераШтрихкодов.НачатьВызовОтсоединить(ОпПослеОтсоединенияСканера);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеЗавершение);

	КонецЕсли

КонецПроцедуры

Процедура ПослеОтсоединенияСканера(Результат, Параметры, ОповещениеЗавершение) Экспорт
	ВыполнитьОбработкуОповещения(ОповещениеЗавершение);
КонецПроцедуры

// Выполняет обработку оповещения если оно указано
// 
// Параметры: 
//  Оповещение - выполняемое описание оповещения, может быть Неопределено
//	Результат - результат, который будет передан в обработчик оповещения
// 
// Возвращаемое значение: 
//  Нет
Процедура ВыполнитьОбработкуОповещенияЕслиОпределено(Оповещение, Результат)
	Если НЕ Оповещение = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
	КонецЕсли;
КонецПроцедуры

// Возвращает тип операционной системы
// 
// Параметры: 
//  Нет
// 
// Возвращаемое значение: 
//  Строка 'Windows' или 'Linux'
Функция ПолучитьТипОС()
	
	ИнформацияОСистеме = Новый СистемнаяИнформация;
	
	Если ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		ТипОС = "Windows";
		
	ИначеЕсли ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ ИнформацияОСистеме.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		ТипОС = "Linux";
		
	КонецЕсли;
	
	Возврат ТипОС;
	
КонецФункции
